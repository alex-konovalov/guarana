To do:
- Construct an example for which all features of the 
  Mal'cev correspondence are going to be needed. 
  Use for example random subgrups of the triangular 
  groups.

- In which form should the groups G,C,N be given ? 
  Investigate how the assumption that we need:
  1. N given by Mal'cev basis 
  2. C given by Mal'cev basis whose first part contains the
     representative for CN/N. 
  3. CN/N free abelian
  4. G/CN finite 
  and so on 
  
  can be represented in GAP.   

- clean up code in gap/supple

- integrate code from symbolic.g
  How can we speed up the computation of the star polynomials ? 

- investigate why the computation of the log,exp polynomials
  is so  fast, once we have the star polys. 
  For example in F_2,8 using the symbolic Lie bracket is very slow. 
  But it seems that using the star pols for computing log and exp
  does not take much more time.

- Idea for efficient star: 
  save information about already computed lie brackets. 
  We know a priori which lie brackets are going to be computed in 
  which order. This can be used to build an efficient data  
  structure(tree) for the computation of star. 
  
- Go step for step through the paper and implement everything
  that is mentionend. For example:
  - application of powers of automorph.
  - application of recursive powers of autom.
- Write code to compute the weights of a collector. 
  Compare with Werner's code in polycyclic ( IsWeightedCollector ). 

- Long term aim:
  The user comes along with a pc-group G.
 
  In a first step a good polycyclic sequence of G is computed. 
  Second the Mal'cev correspondence is set up and everything else
  that is needed for the fast multiplication. 
  Then collection can be performed using this setup. 

  It seems reasonable to have a record like 
  recLieAlg 
  that contains everything that is needed to go back
  and forwards between N and L(N). 

  Probably it is not so good to attach information to N,
  because N might change or at least the pcp presentation 
  of it. 
 
